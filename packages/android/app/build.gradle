apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.protobuf'
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "bible.instant"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 2
        versionName "1.1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        main {
            proto {
                srcDir "../../proto"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding = true
    }

    compileOptions {
        // Required for Sentry
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.12.3'
    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                // In most cases you don't need the full Java output
                // if you use the lite output.
                remove java
            }
            task.plugins {
                javalite { }
            }
        }
    }
}

cargo {
    module = '../../bridge-c'
    libname = 'bridge_c'
    targets = ['arm', 'arm64', 'x86', 'x86_64']
    profile = 'release'
    // https://github.com/mozilla/rust-android-gradle/issues/28
    // targetDirectory = '../target'
    def cargoTarget = "${project.gradle.gradleUserHomeDir}/android-engine-build-outputs"
    def relativeCargoTarget = java.nio.file.Paths.get(project.projectDir.absolutePath).relativize(java.nio.file.Paths.get(cargoTarget))
    // Tells the plugin where to find cargo outputs, but its relative to project root
    targetDirectory = relativeCargoTarget
    exec { spec, toolchain ->
        println "Gradle plugin will look for cargo outputs here: $relativeCargoTarget"
        println "Telling cargo to output here: CARGO_TARGET_DIR: $cargoTarget"
        spec.environment("CARGO_TARGET_DIR", cargoTarget)
    }
}

tasks.whenTaskAdded { task ->
    if ((task.name == 'javaPreCompileDebug' || task.name == 'javaPreCompileRelease')) {
        task.dependsOn 'cargoBuild'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.1.0'
    implementation "androidx.navigation:navigation-fragment:$navVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navVersion"
    implementation 'com.google.protobuf:protobuf-lite:3.0.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation('com.squareup.retrofit2:converter-protobuf:2.9.0') {
      exclude group: 'com.google.protobuf'
    }
    implementation "io.sentry:sentry-android:$sentryVersion"
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
